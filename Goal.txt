Sprint (17/07/1021 - 24/07/2021):

#108 	- Provide documentation and unit testing for FinalEngine.Resources project
#107 	- [BUG] GameTime is capped to 60 FPS due to VSyncing
#106 	- [BUG] Transparent textures are not transparent when rendered by the SpriteDrawer
#105 	- [BUG] Textures are loaded upside down
#104 	- [FEATURE REQUEST] GameTime.Delta and GameTime.FrameRate should be floats, not doubles
#103 	- [BUG] The viewport should be set to the dimension of the window
#102 	- [BUG] Sprite drawer should starting drawing from the top left corner of the window
#97 	- [FEATURE REQUEST 2.0] Support null textures for ISpriteBatch
#109	- [FEATURE REQUEST] Scene Management

- Windowing :)
- Input :)
- Rendering :)
  - Render Context :)
  - Render Device
    - Input Assembler :)
    - Rasterizer :)
    - Pipeline :)
    - Output Merger :)
    - Resource Factory :)
      - Texture 2D :)
      - Vertex Buffer :)
      - Input Layout :)
      - Shader :)
      - Shader Program :)
  - Texture Loader :)
  - Sprite Batching :)
- Audio
- Physics
- Scene & Entity Management
  - ECS :)
  - Some sort of scene management
- Logging
- Resource Management
- File IO :)
- Game Loop :)

============================================

Just some people and things I want to mention in the README if I ever post it publicly:

Credits:

- Learn OpenGL
- DirectX Tutorials
- TheBennyBox
- ThinMatrix
- TheCherno
- Veldrid
- OpenTK Discord
- KinsonDigital

public class ResourceManager : IResourceManager
{
	private readonly IDictionary<Type, object> loaders;

	private readonly IDictionary<Type, Dictionary<string, object>> typeToResourceMap;

	public ResourceManager(string resourcePath)
	{
		this.loaders = new Dictionary<Type, object>();
		
		// TODO: Register loaders here (texture loader, model loader, etc)
		// TODO: Load resources from the resource path here.
		
		this.typeToResourceMap = new Dictionary<Type, Dictionary<string, object>>();
	}

	public IResourceLoader<T> GetLoader<T>()
		where T : IResource
	{
		if (!this.loaders.TryGetValue(typeof(T), out object value))
		{
			throw new ArgumentException();
		}

		return value as IResourceLoader<T>;
	}

	public T GetResource<T>(string name)
		where T : IResource
	{
		if (this.typeToResourceMap.TryGetValue(typeof(T), out Dictionary<string, object> resourceMap) && resourceMap.TryGetValue(name, out object resource))
		{
			return (T)resource;
		}

		throw new Exception();
	}

	public void RegisterLoader<T>(IResourceLoader<T> loader)
		where T : IResource
	{
		this.loaders.Add(typeof(T), loader);
	}
}
