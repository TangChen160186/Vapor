- Windowing :)
- Input :)
- Rendering :)
  - Render Context :)
  - Render Device
    - Input Assembler :)
    - Rasterizer :)
    - Pipeline :)
    - Output Merger :)
    - Resource Factory :)
      - Texture 2D :)
      - Vertex Buffer :)
      - Input Layout :)
      - Shader :)
      - Shader Program :)
  - Texture Loader
  - Sprite Batching
- Audio
- Physics
- Scene & Entity Management
- Logging
- File IO :)
- Game Loop

============================================

Just some people and things I want to mention in the README if I ever post it publicly:

Credits:

- Learn OpenGL
- DirectX Tutorials
- TheBennyBox
- ThinMatrix
- TheCherno
- Veldrid
- OpenTK Discord
- KinsonDigital

// Would this improve performance?
public void SetRasterState(RasterStateDescription description)
{
    if (lastState.CullEnabled != description.CullEnabled)
    {
        if (description.CullEnabled)
        {
            this.invoker.Enable(EnableCap.CullFace);
        }
        else
        {
            this.invoker.Disable(EnableCap.CullFace);
        }
    }
}

public class ResourceManager : IResourceManager
{
	private readonly IDictionary<Type, object> loaders;

	private readonly IDictionary<Type, Dictionary<string, object>> typeToResourceMap;

	public ResourceManager(string resourcePath)
	{
		this.loaders = new Dictionary<Type, object>();
		
		// TODO: Register loaders here (texture loader, model loader, etc)
		// TODO: Load resources from the resource path here.
		
		this.typeToResourceMap = new Dictionary<Type, Dictionary<string, object>>();
	}

	public IResourceLoader<T> GetLoader<T>()
		where T : IResource
	{
		if (!this.loaders.TryGetValue(typeof(T), out object value))
		{
			throw new ArgumentException();
		}

		return value as IResourceLoader<T>;
	}

	public T GetResource<T>(string name)
		where T : IResource
	{
		if (this.typeToResourceMap.TryGetValue(typeof(T), out Dictionary<string, object> resourceMap) && resourceMap.TryGetValue(name, out object resource))
		{
			return (T)resource;
		}

		throw new Exception();
	}

	public void RegisterLoader<T>(IResourceLoader<T> loader)
		where T : IResource
	{
		this.loaders.Add(typeof(T), loader);
	}
}
